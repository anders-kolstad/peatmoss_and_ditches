[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Analysing the effect of bog ditches on Sphagnum communities",
    "section": "",
    "text": "1 Introduction\nThis web page documents the analysis for for a paper by Marte Fandrem on the effects of hydrological disturbance on the growth of Sphagnum mosses on a Norwegian bog.\nThe bog is a relatively large ombrotrophic bog previously used for peat extraction, and also drained and used for forest plantations.\nSphagnum growth was measured using the cranked wire technique on permanent vegetation quadrats (n = 28) from 2017 to 2022 (5 growing seasons). Each vegetation quadrat has 16 points (i.e. pins) and each pin was measured up to 4 times on each sampling occasion (on each side and by different people). The first 18 vegetation plots were initiated in 2017 and are paired with water table well that log the water table depth. These vegetation plots are situated in homogeneous vegetation types (bog lawns), but with varying distance to disturbances (extraction sites and ditches). The quadrats numbered 18-28 were initiated in 2021 and a placed relatively for from the hydrological disturbances, but in varying communities (hollows and hummoks).\n\n\nLoad packages\nlibrary(tidyverse)\nlibrary(sf)\nlibrary(tmap)\n\n\n\n\nImport data\npath    &lt;- \"data/shapeFiles/\"\nditches &lt;- sf::read_sf(paste0(path, \"ditches/grofter.shp\"))\nmassifs  &lt;- sf::read_sf(paste0(path, \"massifs/hostadmyra_myrmassiv.shp\")) \n\n#extrSites &lt;- sf::read_sf(paste0(path, \"peatExtractionSites/Torvtak.shp\"))\n# This data is the same as the masifs.\n\nquadrats &lt;- sf::read_sf(paste0(path, \"vegetationQuadrats1/veipunkter_vannbronner_ruter_2017.shp\")) |&gt;\n  bind_rows(sf::read_sf(paste0(path, \"vegetationQuadrats2/vegetasjonsruter_19-30.shp\")))\n\n\n\n\nCreate map\ntm_shape(massifs) +\n  tm_polygons(col = \"Name\",\n              palette = c(\"grey60\", \"grey70\", \"grey80\"),\n              legend.show=F) +\n  tm_shape(ditches |&gt;\n             mutate(\"Ditch age\" = case_when(\n               Name == \"Eldre\" ~ \"Old\",\n               Name == \"Nyere\" ~ \"More recent\",\n               .default = \"Old\"\n             ))) +\n  tm_lines(col = \"Ditch age\",\n           lwd=2,\n           palette = c(\"red\", \"orange\")) +\n  #tm_shape(extrSites) +\n  #tm_polygons()\n  tm_shape(quadrats) +\n  tm_dots(size = 2,\n          shape=21,\n          col = \"green\",\n          alpha = 0.5)  +\n  tm_scale_bar(position = c(\"left\", \"bottom\")) +\n  tm_compass()\n\n\n\n\n\nMap of study area. Green circles are permanent vegetation quadrats. The shades of grey indicator different bog massifs.\n\n\n\n\n\nThe shape file with the position of vegetation qadrats do not contain the qadrat ID for all cases. We need to add that.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "ch_data_exploration.html",
    "href": "ch_data_exploration.html",
    "title": "2  Data exploration and cleaning",
    "section": "",
    "text": "2.1 Import and compile data\nThe data set is located on GitHub in an xlsx format. The data are split into different tabs based on year.\nImport data set\ndat &lt;- read_excel(\"data/growthData.xlsx\", \n    sheet = \"y2017\") |&gt;\n  # remove some measurements from October (FALL2). \n  # These were measured again in November \n  # along with the rest of the quadrats.\n  select(-DateFALL2,\n         -HeightFALL2,\n         -ObserverFALL2) |&gt;\n  # adding a variable that keeps track of which tab the data comes from\n  add_column(tab_year = 2017) |&gt;\n  bind_rows(\n    read_excel(\"data/growthData.xlsx\", \n    sheet = \"y2018\") |&gt;\n  mutate(DateFALL = as.Date(DateFALL, \"%d.%m.%Y\"),\n         tab_year = 2018)\n         ) |&gt;\n  bind_rows(\n    read_excel(\"data/growthData.xlsx\", \n    sheet = \"y2019\") |&gt;\n    mutate(\n      DateSUMMER = as.Date(DateSUMMER, \"%d/%m/%Y\"),\n      DateFALL = as.Date(DateFALL, \"%d/%m/%y\"),\n      tab_year = 2019)\n  ) |&gt;\n  bind_rows(\n    read_excel(\"data/growthData.xlsx\", \n    sheet = \"y2020\") |&gt;\n    mutate(DateSPRING = as.Date(DateSPRING, \"%d/%m/%Y\"),\n           tab_year = 2020)\n  ) |&gt;\n  bind_rows(\n    read_excel(\"data/growthData.xlsx\", \n    sheet = \"y2021\") |&gt;\n      # data had explicit NAs in cells that were read as text:\n    mutate(across(starts_with(\"Height\"), as.numeric),\n           tab_year = 2021)\n  ) |&gt;\n  bind_rows(\n    read_excel(\"data/growthData.xlsx\", \n    sheet = \"y2022\") |&gt;\n    mutate(across(starts_with(\"Height\"), as.numeric),\n           Plot_no = as.numeric(Plot_no),\n           Pin_no = as.numeric(Pin_no),\n           tab_year = 2022) \n  )\nHere’s what the data looks like after I just row bind them:\nCode\nDT::datatable(dat |&gt; slice_sample(n = 10))\nI need to make this into a long format. There are multiple date and height columns that I want to combine. I will split the spring and fall data (ignoring the summer data) into separate sets, and then combine them again later.\nTurn into long format\n# Spring data\ndat_spring &lt;- dat |&gt;\n  select(-contains(c(\"FALL\", \"SUMMER\", \"diff\"))) |&gt;\n  pivot_longer(cols = contains(\"Height\"),\n               values_to = \"Height_cm\",\n               values_drop_na = T) |&gt;\n  separate_wider_delim(name, \n                       delim = \"_\",\n                       names = c(\"temp\", \"pinPosition\"),\n                       too_few = \"align_start\") |&gt;\n  filter(str_detect(temp, \"Rejected\", negate = T)) |&gt;\n  mutate(pinPosition = case_when(\n    is.na(pinPosition) ~ \"single\",\n    .default = pinPosition\n  )) |&gt;\n  select(-temp) |&gt;\n  add_column(season = \"spring\") |&gt;\n  rename(date = DateSPRING)\n\n#names(dat) [!names(dat) %in% names(dat_spring) ]\n#unique(dat_spring$pinPosition)\n\n\ndat_fall &lt;- dat |&gt;\n  select(-contains(c(\"SPRING\", \"SUMMER\", \"diff\"))) |&gt;\n  # introduces NA, where NA was originally as text\n  mutate(across(starts_with(\"Height\"), as.numeric)) |&gt;\n  pivot_longer(cols = contains(\"Height\"),\n               values_to = \"Height_cm\",\n               values_drop_na = T) |&gt;\n  separate_wider_delim(name, \n                       delim = \"_\",\n                       names = c(\"temp\", \"pinPosition\"),\n                       too_few = \"align_start\") |&gt;\n  filter(str_detect(temp, \"Rejected\", negate = T)) |&gt;\n  mutate(pinPosition = case_when(\n    is.na(pinPosition) ~ \"single\",\n    .default = pinPosition\n  )) |&gt;\n  select(-temp) |&gt;\n  add_column(season = \"fall\") |&gt;\n  rename(date = DateFALL)\n\n# A check looking into the warnings introduced when turning\n# Hieght columns from characters to numeric. All fine.\n# ch &lt;- dat |&gt;\n#   select(-contains(c(\"SPRING\", \"SUMMER\", \"diff\"))) |&gt;\n#   drop_na(HeightFALL) |&gt;\n#   unite(\"link\", c(ID, DateFALL))\n# num &lt;- dat |&gt;\n#   select(-contains(c(\"SPRING\", \"SUMMER\", \"diff\"))) |&gt;\n#   mutate(across(starts_with(\"Height\"), as.numeric)) |&gt;\n#   drop_na(HeightFALL) |&gt;\n#   unite(\"link\", c(ID, DateFALL))\n# ch |&gt;\n#   filter(!link %in% num$link) |&gt;\n#   View()\n  \n\n# Combining the two\ndat_long &lt;- dat_spring |&gt;\n  bind_rows(dat_fall) |&gt;\n  # merge comments and note columns\n  unite(\"Remarks\", \n        contains(c(\"Comment\", \"Notes\")), \n        sep = \". \",\n        na.rm=TRUE) |&gt;\n  # merge observer columns\n  unite(\"Observer\",\n        contains(\"Observer\"),\n        sep = \". \",\n        na.rm = TRUE) |&gt;\n  mutate(year = year(date))\n\nrm(dat_fall, dat_spring)\nThe long data is 14641 rows. This is too much to display as an html table on this web site, but here is a random sample of 100 rows just to illustrate.\nCode\nDT::datatable(dat_long[sample(1:nrow(dat_long), 100),])",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data exploration and cleaning</span>"
    ]
  },
  {
    "objectID": "ch_data_exploration.html#looking-for-data-problems",
    "href": "ch_data_exploration.html#looking-for-data-problems",
    "title": "2  Data exploration and cleaning",
    "section": "2.2 Looking for data problems",
    "text": "2.2 Looking for data problems\n\n2.2.1 Treatment\nA closer look at the Treatment variable.\n\n\nCode\ndat_long |&gt;\n  count(Treatment)\n\n\n# A tibble: 10 × 2\n   Treatment     n\n   &lt;chr&gt;     &lt;int&gt;\n 1 EDGE        492\n 2 HOLLOW     1642\n 3 HUMMOCK     762\n 4 K          1888\n 5 M          2046\n 6 R1         1941\n 7 R2         1917\n 8 T1         1923\n 9 T2         1958\n10 &lt;NA&gt;         72\n\n\nHow can Treatment be NA? Turns out these are all new pins, and all from the fall. I will delete the rows for a different reason below.\n\n\n2.2.2 Dates\n\n2.2.2.1 Seasons\nAre the dates entered correctly to match the seasons?\n\n\nCode\ndat_long |&gt;\n  ggplot() +\n  geom_bar(aes(x = month(date)))+\n  facet_grid(year(date)~season)\n\n\n\n\n\n\n\n\nFigure 2.1: Distribution of measurement dates (months).\n\n\n\n\n\nThere are some measurements in the fall of 2020 that are wrong. It turns out the month and day have been switched for plots 8 and 9:\n\n\nCode\ndat_long |&gt;\n  mutate(year = year(date)) |&gt;\n  filter(year == 2020,\n         season == \"fall\") |&gt;\n  ggplot() +\n  geom_bar(aes(x = date),\n           color = \"yellow\",\n           fill = \"orange\")+\n  theme(axis.text.y = element_blank()) +\n  facet_grid(Plot_no~.)\n\n\n\n\n\n\n\n\nFigure 2.2: Checking inconsistency in date entries.\n\n\n\n\n\n\n\nConfirming tht day and month have been switched.\ndat_long |&gt;\n  filter(Plot_no %in% c(8, 9),\n         season == \"fall\",\n         year(date) == 2020) |&gt;\n  View()\n\n\nI will reverse these now.\n\n\nFix date mistake\ndat_long &lt;- dat_long |&gt;\n  mutate(date = case_when(\n    Plot_no %in% c(8,9) & date == date(\"2020-06-10\") ~ date(\"2020-10-06\"),\n    .default = date\n  ))\n\n\n\n\nCode\ndat_long |&gt;\n  mutate(year = year(date)) |&gt;\n  filter(year == 2020,\n         season == \"fall\") |&gt;\n  ggplot() +\n  geom_bar(aes(x = date),\n           color = \"yellow\",\n           fill = \"orange\")+\n  theme(axis.text.y = element_blank()) +\n  facet_grid(Plot_no~.)\n\n\n\n\n\n\n\n\nFigure 2.3: Checking measurement dates after fixing mistake.\n\n\n\n\n\nThen there were some errors with the dates in the spring of 2019 Figure 2.1.\n\n\nCode\ndat_long |&gt;\n  filter(year == 2019,\n         season == \"spring\") |&gt;\n  mutate(month = month(date)) |&gt;\n  group_by(date, month) |&gt;\n  count()\n\n\n# A tibble: 2 × 3\n# Groups:   date, month [2]\n  date                month     n\n  &lt;dttm&gt;              &lt;dbl&gt; &lt;int&gt;\n1 2019-05-15 00:00:00     5   584\n2 2019-10-05 00:00:00    10   576\n\n\nHere I will assume that it is only the month that is wrong. Fixing this now:\n\n\nFix date mistake\ndat_long |&gt;\n  mutate(date = case_when(\n    year == 2019 & date == date(\"2019-10-05\") ~ date(\"2019-05-10\"),\n    .default = date\n  )) |&gt;\n  filter(year == 2019,\n         season == \"spring\") |&gt;\n  mutate(month = month(date)) |&gt;\n  group_by(date, month) |&gt;\n  count()\n\n\n# A tibble: 2 × 3\n# Groups:   date, month [2]\n  date                month     n\n  &lt;dttm&gt;              &lt;dbl&gt; &lt;int&gt;\n1 2019-05-10 00:00:00     5   576\n2 2019-05-15 00:00:00     5   584\n\n\nFix date mistake\n# OK\n\ndat_long &lt;- dat_long |&gt;\n  mutate(date = case_when(\n    year == 2019 & date == date(\"2019-10-05\") ~ date(\"2019-05-10\"),\n    .default = date\n  ))\n\n\n\n\n2.2.2.2 Year\n\n\nCode\ndat_long |&gt;\n  ggplot() +\n  geom_bar(aes(\n    x = factor(year(date)),\n    fill = season)) +\n  labs(x = \"Year\")\n\n\n\n\n\n\n\n\nFigure 2.4: Distribution of data points over the years and seasons\n\n\n\n\n\nI wonder why there are so relatively few observation in 2020.\n\n\nCode\noptions(knitr.kable.NA = '')\n\ndat_long |&gt;\n  mutate(tab_year = paste0(\"tab_year\", tab_year)) |&gt;\n  group_by(tab_year, year) |&gt;\n  count() |&gt;\n  spread(year, n) |&gt;\n  knitr::kable() |&gt;\n  kable_paper(full_width = F)\n\n\n\n\n\n\ntab_year\n2017\n2018\n2019\n2020\n2021\n2022\n\n\n\n\ntab_year2017\n570\n\n\n\n\n\n\n\ntab_year2018\n\n1729\n\n\n\n\n\n\ntab_year2019\n\n\n2316\n\n\n\n\n\ntab_year2020\n\n\n\n1752\n\n576\n\n\ntab_year2021\n\n\n\n\n4034\n\n\n\ntab_year2022\n\n\n\n\n\n3664\n\n\n\n\n\n\n\n\nTurns out some of the 2020 data (those added to the 2020 tab) was give the wrong date.\n\n\nFix date mistake\ndat_long |&gt;\n  mutate(date = case_when(\n    tab_year == 2020 & year == 2022 ~ date - years(2),\n    .default = date),\n         year = year(date))|&gt;\n  mutate(tab_year = paste0(\"tab_year\", tab_year)) |&gt;\n  group_by(tab_year, year) |&gt;\n  count() |&gt;\n  spread(year, n) |&gt;\n  knitr::kable() |&gt;\n  kable_paper(full_width = F)\n\n\n\n\n\n\ntab_year\n2017\n2018\n2019\n2020\n2021\n2022\n\n\n\n\ntab_year2017\n570\n\n\n\n\n\n\n\ntab_year2018\n\n1729\n\n\n\n\n\n\ntab_year2019\n\n\n2316\n\n\n\n\n\ntab_year2020\n\n\n\n2328\n\n\n\n\ntab_year2021\n\n\n\n\n4034\n\n\n\ntab_year2022\n\n\n\n\n\n3664\n\n\n\n\n\n\n\n\nFix date mistake\n# OK\n\ndat_long &lt;- dat_long |&gt;\n  mutate(date = case_when(\n    tab_year == 2020 & year == 2022 ~ date - years(2),\n    .default = date),\n         year = year(date))\n\n\n\n\nCode\ndat_long |&gt;\n  ggplot() +\n  geom_bar(aes(\n    x = year,\n    fill = season)) +\n  labs(x = \"Year\")\n\n\n\n\n\n\n\n\nFigure 2.5: Distribution of data points over the years and seasons after moving some datapoints from 2022 to 2020.\n\n\n\n\n\n\n\n\n2.2.3 ID variable\nA closer look at the ID variable.\nHere’s the time series for a single pin, measured from the west.\n\n\nCode\ndat_long |&gt;\n  filter(grepl(\"^8.14\", ID),\n         pinPosition == \"W2\") |&gt;\n  arrange(year) |&gt;\n  select(ID, Remarks, year, season, Height_cm) |&gt;\n  datatable()\n\n\n\n\n\n\nIt appears the pin was replaced in the fall of 2019. I must assume that what is recorded there is the height of the new pin, and is therefore not compareable to the spring value that same year. The new annotation only last one time, i.e. it is not repeated the next season. In the spring of 2021 the wire seems to have been replaced again, and then again in the fall. In the spring of 2022 it was replaced a forth(?) time, according to the remarks. But this time the ID is unchanged.\nConclusion. I will calculate the growth per season, if and only if the spring and fall height are recorded on the same pin/wire. That means I can remove seasons where the fall measurements are done on new wires. There are also some IDs that have the suffix old. In these cases there should always be one measurement for the same date with the prefix new, meaning I can delete all old measurements from the spring heights.\n\n\nCode\ndat_long |&gt;\n  separate_wider_regex(ID,\n    c(ID_num = \"\\\\d+.\\\\d++\", text_in_ID = \"\\\\w+\"), \n    too_few = \"align_start\", \n    cols_remove = F) |&gt;\n  count(text_in_ID)\n\n\n# A tibble: 5 × 2\n  text_in_ID     n\n  &lt;chr&gt;      &lt;int&gt;\n1 NØ             2\n2 SV             1\n3 new          964\n4 old          348\n5 &lt;NA&gt;       13326\n\n\nRemoving those with direction in the ID\n\n\nCode\ndat_long &lt;- dat_long|&gt;\n  separate_wider_regex(ID,\n    c(ID_num = \"\\\\d+.\\\\d++\", text_in_ID = \"\\\\w+\"), \n    too_few = \"align_start\", \n    cols_remove = F) |&gt;\n  filter(!text_in_ID %in% c(\"NØ\", \"SV\"))\n\n\nThen I remove those that are old in spring and new in fall.\n\n\nCode\ndat_long &lt;- dat_long |&gt;\n  mutate(text_in_ID = case_when(\n    is.na(text_in_ID) ~ \"-\",\n    .default = text_in_ID\n  )) |&gt;\n  filter(\n    ifelse(text_in_ID == \"old\",\n      season != \"spring\",\n      TRUE\n    ),\n    ifelse(text_in_ID == \"new\",\n      season != \"fall\",\n      TRUE\n    ),\n  )\n\n\nI should be able to convert ID_num to numeric without error\n\n\nCode\nsummary(as.numeric(dat_long$ID_num))\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   1.10    6.40   12.16   12.92   18.10   30.90 \n\n\nThat’s is fine. And how does the text part of the ID look now?\n\n\nCode\ndat_long |&gt;\n  group_by(year, season) |&gt;\n  count(text_in_ID) |&gt;\n  spread(text_in_ID, n) |&gt;\n  select(-\"-\") |&gt;\n  kbl() |&gt;\n  kable_paper(full_width = F)\n\n\n\n\n\n\nyear\nseason\nnew\nold\n\n\n\n\n2017\nfall\n\n\n\n\n2017\nspring\n\n\n\n\n2018\nfall\n\n\n\n\n2018\nspring\n\n\n\n\n2019\nfall\n\n4\n\n\n2019\nspring\n8\n\n\n\n2020\nfall\n\n24\n\n\n2020\nspring\n\n\n\n\n2021\nfall\n\n4\n\n\n2021\nspring\n412\n\n\n\n2022\nfall\n\n\n\n\n2022\nspring\n\n\n\n\n\n\n\n\n\n\nThere are some ID numbers that look a bit weird:\n\n\nCode\ndat_long |&gt;\n  filter(nchar(ID_num) &gt; 5) |&gt;\n  distinct(ID_num)\n\n\n# A tibble: 3 × 1\n  ID_num            \n  &lt;chr&gt;             \n1 20.100000000000001\n2 20.399999999999999\n3 20.149999999999999\n\n\nID_num is a character column, but we can have it as numeric and round to two decimal points.\n\n\nfix weird ID_num\ndat_long &lt;- dat_long |&gt;\n  mutate(ID_num = round(as.numeric(ID_num), 2))\n\n\n\n\n2.2.4 Pin position\n\n\nCode\ndat_long |&gt;\n  group_by(year, season) |&gt;\n  count(pinPosition) |&gt;\n  spread(pinPosition, n) |&gt;\n  kable() |&gt;\n  kable_paper()\n\n\n\n\n\n\nyear\nseason\nE1\nE2\nH1\nH2\nsingle\nV1\nV2\nW1\nW2\n\n\n\n\n2017\nfall\n\n\n\n\n280\n\n\n\n\n\n\n2017\nspring\n\n\n\n\n287\n\n\n\n\n\n\n2018\nfall\n\n\n279\n279\n\n280\n280\n\n\n\n\n2018\nspring\n\n\n\n\n\n287\n288\n\n\n\n\n2019\nfall\n274\n274\n\n\n\n\n\n274\n274\n\n\n2019\nspring\n287\n287\n\n\n\n\n\n287\n287\n\n\n2020\nfall\n288\n276\n\n\n\n\n\n288\n276\n\n\n2020\nspring\n276\n276\n\n\n\n\n\n276\n276\n\n\n2021\nfall\n367\n366\n\n\n\n\n\n367\n366\n\n\n2021\nspring\n478\n478\n\n\n\n\n\n478\n478\n\n\n2022\nfall\n439\n441\n\n\n\n\n\n437\n439\n\n\n2022\nspring\n478\n478\n\n\n\n\n\n476\n476\n\n\n\n\n\n\n\n\nI want to combine E1 with E2, H1 with H2, etc.\nIn addition, in 2018 I want to combine all pinPositions. In 2018, V (venstre) can be made equivalent W (west) , and H is E.\n\n\nCreate pinPosition2 by combination\ndat_long |&gt;\n  mutate(pinPosition2 = case_match(\n    pinPosition,\n    c(\"H1\", \"H2\", \"V1\", \"V2\") ~ \"single\",\n    c(\"E1\", \"E2\") ~ \"E\",\n    c(\"W1\", \"W2\") ~ \"W\",\n    .default = pinPosition\n  )) |&gt;\n  count(pinPosition2)\n # OK. This variable can be aggregated across\n\ndat_long &lt;- dat_long |&gt;\n  mutate(pinPosition2 = case_match(\n    pinPosition,\n    c(\"H1\", \"H2\", \"V1\", \"V2\") ~ \"single\",\n    c(\"E1\", \"E2\") ~ \"E\",\n    c(\"W1\", \"W2\") ~ \"W\",\n    .default = pinPosition\n  )) \n\n\n\n\nCode\ndat_long |&gt;\n  group_by(year, season) |&gt;\n  count(pinPosition2) |&gt;\n  spread(pinPosition2, n) |&gt;\n  kbl() |&gt;\n  kable_paper(full_width=F)\n\n\n\n\n\n\nyear\nseason\nE\nsingle\nW\n\n\n\n\n2017\nfall\n\n280\n\n\n\n2017\nspring\n\n287\n\n\n\n2018\nfall\n\n1118\n\n\n\n2018\nspring\n\n575\n\n\n\n2019\nfall\n548\n\n548\n\n\n2019\nspring\n574\n\n574\n\n\n2020\nfall\n564\n\n564\n\n\n2020\nspring\n552\n\n552\n\n\n2021\nfall\n733\n\n733\n\n\n2021\nspring\n956\n\n956\n\n\n2022\nfall\n880\n\n876\n\n\n2022\nspring\n956\n\n952\n\n\n\n\n\n\n\n\n\n\n2.2.5 Species\nTheShapgnum species identities were recorded for each pin/wire from 2020 and onwards.\n\n\nCode\n#dat_long |&gt;\n#  count(Species_W) |&gt;\n#  datatable()\n#  \ndat_long |&gt;\n  count(Species_E) |&gt;\n  datatable()\n\n\n\n\n\n\n\n\nStandardise factor levels\ndat_long &lt;- dat_long |&gt;\n  mutate(\n    Species_W = case_match(\n      Species_W,\n      \"rub/pap\" ~ \"pap/rub\",\n      c(\"med (bal)\", \"med/bal\") ~ \"bal/med\",\n      .default = Species_W),\n    Species_E = case_match(\n      Species_E,\n      \"rub/pap\" ~ \"pap/rub\",\n      c(\"med (bal)\", \"med/bal\") ~ \"bal/med\",\n      \"pap/med\" ~ \"med/pap\",\n      .default = Species_E)\n    )\n\n\n\n\nCode\ndat_long |&gt;\n  group_by(year) |&gt;\n  count(Species_W, Species_E) |&gt;\n  ungroup() |&gt;\n  slice_head(n = 5) |&gt;\n  kbl()|&gt;\n  kable_paper(full_width=F)\n\n\n\n\n\n\nyear\nSpecies_W\nSpecies_E\nn\n\n\n\n\n2017\n\n\n567\n\n\n2018\n\n\n1693\n\n\n2019\n\n\n2244\n\n\n2020\nbal\nbal\n56\n\n\n2020\nbal\nmed\n16\n\n\n\n\n\n\n\n\n\nSpecies were recorded from year 2020.\n\n\n\n2.2.6 Seasonal growth\nThe main response variable will be seasonal growth, from one spring to the following fall.\n\n\nCode\ndat_season &lt;- dat_long |&gt;\n  pivot_wider(\n    id_cols = c(\n      ID_num,\n      Plot_no,\n      Pin_no,\n      pinPosition2,\n      Treatment,\n      year\n    ),\n    names_from = season,\n    values_from = Height_cm,\n    values_fn = mean,\n    unused_fn = list(\n      Species_W = list,\n      Species_E = list\n    )\n  ) |&gt;\n  mutate(growth_cm = spring - fall)\n\ndat_season |&gt;\n  pull(growth_cm) |&gt;\n  summary()\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n-3.9000  0.1500  0.5000  0.5823  0.9000  5.2000     365 \n\n\nAccording to this, the peat grows 5 mm per season. But there are some of NAs. These arise when there is no measurement done for one of the seasons. Let’s look is there are any patterns in these NA’s.\n\n\nCode\ndat_season |&gt;\n  filter(is.na(growth_cm)) |&gt;\n  group_by(year, Treatment) |&gt;\n  count() |&gt;\n  pivot_wider(names_from = Treatment, values_from = n) |&gt;\n  kbl() |&gt;\n  kable_paper()\n\n\n\n\n\n\nyear\nK\nR1\nR2\nT1\nM\nT2\nEDGE\nHOLLOW\nHUMMOCK\n\n\n\n\n2017\n2\n2\n2\n1\n\n\n\n\n\n\n\n2018\n\n2\n\n1\n1\n4\n\n\n\n\n\n2019\n12\n4\n10\n2\n\n2\n\n\n\n\n\n2020\n\n6\n2\n\n10\n6\n\n\n\n\n\n2021\n30\n30\n36\n26\n72\n28\n\n\n\n\n\n2022\n\n2\n\n4\n\n\n63\n2\n3\n\n\n\n\n\n\n\n\n\nEDGE has a large number of NA’s in 2022. That is because the edge treatment was dropped.\nThere is no big increase over time (e.g. due to more wires being replaced).\nThere are many NAs for treatment M in 2021\nThere are many NA in general for 2021\n\nLet’s also look at the distribution of data across Treatments and years.\n\n\nCode\ndat_season |&gt;\n  filter(!is.na(growth_cm)) |&gt;\n  group_by(year, Treatment) |&gt;\n  count() |&gt;\n  pivot_wider(names_from = Treatment, values_from = n) |&gt;\n  kbl() |&gt;\n  kable_paper()\n\n\n\n\n\n\nyear\nK\nM\nR1\nR2\nT1\nT2\nEDGE\nHOLLOW\nHUMMOCK\n\n\n\n\n2017\n46\n48\n46\n45\n47\n48\n\n\n\n\n\n2018\n48\n47\n46\n48\n47\n44\n\n\n\n\n\n2019\n84\n96\n92\n86\n94\n94\n\n\n\n\n\n2020\n96\n86\n90\n94\n96\n90\n\n\n\n\n\n2021\n66\n24\n66\n60\n70\n68\n64\n220\n96\n\n\n2022\n96\n96\n93\n96\n92\n96\n28\n190\n93\n\n\n\n\n\n\n\n\nEdge, Hollow and hummocks are only included from 2021.\n\n\nCode\ndat_season &lt;- dat_season |&gt;\n  filter(!is.na(growth_cm))\n\n\n\n\n2.2.7 Unnest species list columns\nThe species identities are preserved in the dataset as list columns, where one to six species names (abbreviations) are combined. It can be four records if there are two from spring (e.g. W1 and W2) and two from the fall.\nI will first count the number of unique species names in the list columns, and then, if that returns a single species (which is not NA), I will extract the unique species name. If the species differed between the records, I will add NAs. Below is a proof of concept on a smaller sample of the data.\n\n\nProof of concept\n# draw a subset of data with four unique strata\ntemp &lt;- dat_long |&gt;\n  filter(ID_num %in% c(2.80, 3.80),\n         year == 2021)\n\ntemp &lt;- temp |&gt; #[1,\"Species_W\"] &lt;- \"fake species\"\n  mutate(Species_W = case_when(\n# In one strata I will add a second species\n    ID_num == 2.80 & season == \"spring\" & pinPosition == \"W1\" ~ \"fake species\",\n# In the second strata I will add an NA\n    ID_num == 2.80 & season == \"spring\" & pinPosition == \"E1\" ~ NA,\n# In the third strata will add all NAs\n    ID_num == 3.80 & pinPosition2 == \"W\" ~ NA,\n# The fourth strata will have the same four species repeated \n    .default = Species_W\n  ))\n\n# Pivot wider, as I did above when I created dat_season\ntemp2 &lt;- temp |&gt; \n  pivot_wider(\n    id_cols = c(\n      ID_num,\n      Plot_no,\n      Pin_no,\n      pinPosition2,\n      Treatment,\n      year\n    ),\n    names_from = season,\n    values_from = Height_cm,\n    values_fn = mean,\n    unused_fn = list(\n      Species_W = list,\n      Species_E = list\n    )\n  ) |&gt;\n  mutate(growth_cm = spring - fall)\n\n# Testing the method\ntemp2 |&gt;\n  rowwise() |&gt;\n  mutate(sameSpecies = length(unique(Species_W))&lt;2,\n         species = case_when(\n           isTRUE(sameSpecies) ~ Species_W[[1]],\n           .default = NA\n         )) |&gt;\n  select(ID_num,\n         pinPosition2,\n         Species_W,\n         sameSpecies,\n         species) |&gt;\n  datatable()\n# Looks OK\n\n\n\n\nCode\ndat_season &lt;- dat_season |&gt;\n  rowwise() |&gt;\n  mutate(\n    sameSpecies_W = length(unique(Species_W))&lt;2,\n    sameSpecies_E = length(unique(Species_E))&lt;2,\n    species_W = case_when(\n      isTRUE(sameSpecies_W) ~ Species_W[[1]],\n      .default = NA),\n    species_E = case_when(\n      isTRUE(sameSpecies_E) ~ Species_E[[1]],\n      .default = NA)\n         )\n\n\nI’m pretty sure this has worked, since I tried in on the synthetic data, but there are actually zero cases of the species being different across the aggregated strata (mainly this would imply that there had been a species change during the growing season).\n\n\nCode\ndat_season |&gt;\n  count(sameSpecies_E, sameSpecies_W)\n\n\n# A tibble: 1 × 3\n# Rowwise: \n  sameSpecies_E sameSpecies_W     n\n  &lt;lgl&gt;         &lt;lgl&gt;         &lt;int&gt;\n1 TRUE          TRUE           3272\n\n\n\n\n2.2.8 Unique treatments\nThere are cases when theone plot ID has w teatments\n\n\nCode\ndat_season |&gt;\n  filter(ID_num == 28.80) |&gt;\n  select(ID_num,\n         year,\n         Treatment) |&gt;\n  kable() |&gt;\n  kable_classic()\n\n\n\n\n\n\nID_num\nyear\nTreatment\n\n\n\n\n28.8\n2021\nHOLLOW\n\n\n28.8\n2021\nHOLLOW\n\n\n28.8\n2022\nEDGE\n\n\n28.8\n2022\nEDGE\n\n\n\n\n\n\n\n\nI came across the case by chance. Let’s see it there are more cases like this. (This kind of problem can be avoided by having hierarchical datasets also far data field sheets and data punching).\nThese are the ID_num that are duplicated across two or more Treatments:\n\n\nCode\n(dups &lt;- dat_season |&gt;\n  group_by(Treatment) |&gt;\n  count(ID_num) |&gt;\n  ungroup() |&gt;\n  group_by(ID_num) |&gt;\n  count() |&gt;\n  filter(n &gt; 1) |&gt;\n  pull(ID_num))\n\n\n [1] 28.10 28.11 28.12 28.14 28.15 28.16 28.20 28.30 28.40 28.50 28.60 28.70\n[13] 28.80\n\n\nLet’s look at these in detail\n\n\nCode\ndat_season |&gt;\n  filter(ID_num %in% dups) |&gt;\n  View()\n\n\nExploring the dataset tells us that for these 13 plots, the Treatment changed from Hollow in 2021 to Edge in 2022. After talking to Marte, I learned that plot 28 should be Hollow (all the time). Also that plots 29 and 30 should be excluded all together. Those are the two Edge plots.\n\n\nCode\ndat_season &lt;- dat_season |&gt;\n  mutate(Treatment = case_when(\n    Plot_no == 28 ~ \"HOLLOW\",\n    .default = Treatment\n  )) |&gt;\n  filter(!Plot_no %in% c(29,30)) |&gt;\n  select(-Species_W,\n         -Species_E)\n\n\n\n\n2.2.9 Final check\n\n\nCode\ndat_season |&gt;\n  ggplot() +\n  geom_bar(aes(\n    x = year),\n    fill = \"darkkhaki\") +\n  labs(x = \"Year\")\n\n\n\n\n\n\n\n\nFigure 2.6: Distribution of data points across years\n\n\n\n\n\nThe distribution across years looks much better now.\n\n\nCode\ndat_season |&gt;\n  ggplot() +\n  geom_bar(aes(\n    x = year),\n    fill = \"darkkhaki\") +\n  labs(x = \"Year\") +\n  facet_wrap(.~Treatment)\n\n\n\n\n\n\n\n\nFigure 2.7: Distribution of data points across years, conditioned on Treatment\n\n\n\n\n\nThe Edge treatment is now all gone.\n\n\nCode\ndat_season |&gt;\n  pivot_longer(\n    cols = starts_with(\"species\"),\n    values_to = \"Species\"\n    ) |&gt;\n  filter(!is.na(Species),\n         Species != \"NA\",\n         Species != \"dead\") |&gt;\n  count(Species) |&gt;\n  arrange(n) |&gt;\n  mutate(Species = fct_inorder(Species)) |&gt;\n  ggplot() +\n  geom_col(aes(x = Species, y = n),\n           fill = \"darkkhaki\") +\n  coord_flip()\n\n\n\n\n\n\n\n\nFigure 2.8: Distribution of data points across taxa\n\n\n\n\n\nShagnum papilosum, S. medium, S. tennuis and S. rubellum are the four most common species in the dataset.\n\n\nCode\ndat_season |&gt;\n  group_by(year, Treatment) |&gt;\n  count() |&gt;\n  pivot_wider(names_from = Treatment, values_from = n) |&gt;\n  kbl() |&gt;\n  kable_paper()\n\n\n\n\n\n\nyear\nK\nM\nR1\nR2\nT1\nT2\nHOLLOW\nHUMMOCK\n\n\n\n\n2017\n46\n48\n46\n45\n47\n48\n\n\n\n\n2018\n48\n47\n46\n48\n47\n44\n\n\n\n\n2019\n84\n96\n92\n86\n94\n94\n\n\n\n\n2020\n96\n86\n90\n94\n96\n90\n\n\n\n\n2021\n66\n24\n66\n60\n70\n68\n220\n96\n\n\n2022\n96\n96\n93\n96\n92\n96\n218\n93\n\n\n\n\n\n\n\n\nThe distribution of data points across treatments now looks much better as well.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data exploration and cleaning</span>"
    ]
  },
  {
    "objectID": "ch_causal_model.html",
    "href": "ch_causal_model.html",
    "title": "3  Causal model",
    "section": "",
    "text": "flowchart LR\n    A[Distance to ditch]--&gt;B\n    B--&gt;C\n    B--&gt;D\n    C--&gt;D\n    click A callback \"Tooltip for a callback\"\n    click B \"https://www.github.com\" \"This is a tooltip for a link\"\n    click C call callback() \"Tooltip for a callback\"\n    click D href \"https://www.github.com\" \"This is a tooltip for a link\"",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Causal model</span>"
    ]
  },
  {
    "objectID": "appendix-notes.html",
    "href": "appendix-notes.html",
    "title": "Appendix A — Additional Notes",
    "section": "",
    "text": "Sample appendix",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Additional Notes</span>"
    ]
  }
]